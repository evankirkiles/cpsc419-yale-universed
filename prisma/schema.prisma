generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  // This is a netID returned from CAS authentication
  id     String   @id
  bio    String @default("")
  fullName String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  spaces      Space[] 
  comments Comment[]
  likes   Like[]
  files    File[]
  images    ImageFile[]

  // Lucia-specific sessions table
  sessions Session[]
}

model Location {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  isOffCampus Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spaces    Space[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Space {
  id        Int      @id @default(autoincrement())
  name      String
  description String
  userId      String
  locationId  Int?
  modelId Int
  pictureId Int
  model File  @relation(fields: [modelId], references: [id])
  picture ImageFile @relation(fields: [pictureId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
  comments Comment[]
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  spaceId   Int
  userId String
  space    Space       @relation(fields: [spaceId], references: [id])
  user    User       @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  userId String
  spaceId   Int
  User   User @relation(fields: [userId], references: [id])
  Space  Space  @relation(fields: [spaceId], references: [id])
  createdAt DateTime @default(now())
  @@id([spaceId, userId])
}

model File {
  id        Int      @id @default(autoincrement())
  key       String
  ownerId String
  owner   User @relation(fields: [ownerId], references: [id])
  spaces Space[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImageFile {
  id        Int      @id @default(autoincrement())
  key       String
  imageWidth  Int
  imageHeight Int
  ownerId String
  owner   User @relation(fields: [ownerId], references: [id])
  space Space[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}